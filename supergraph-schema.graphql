schema
  @link(url: "https://specs.apollo.dev/link/v1.0")
  @link(url: "https://specs.apollo.dev/join/v0.3", for: EXECUTION)
{
  query: Query
  mutation: Mutation
}

directive @join__enumValue(graph: join__Graph!) repeatable on ENUM_VALUE

directive @join__field(graph: join__Graph, requires: join__FieldSet, provides: join__FieldSet, type: String, external: Boolean, override: String, usedOverridden: Boolean) repeatable on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @join__graph(name: String!, url: String!) on ENUM_VALUE

directive @join__implements(graph: join__Graph!, interface: String!) repeatable on OBJECT | INTERFACE

directive @join__type(graph: join__Graph!, key: join__FieldSet, extension: Boolean! = false, resolvable: Boolean! = true, isInterfaceObject: Boolean! = false) repeatable on OBJECT | INTERFACE | UNION | ENUM | INPUT_OBJECT | SCALAR

directive @join__unionMember(graph: join__Graph!, member: String!) repeatable on UNION

directive @link(url: String, as: String, for: link__Purpose, import: [link__Import]) repeatable on SCHEMA

scalar join__FieldSet

enum join__Graph {
  ORDERS @join__graph(name: "orders", url: "http://localhost:8081/graphql")
  PATIENTS @join__graph(name: "patients", url: "http://localhost:8080/graphql")
}

scalar link__Import

enum link__Purpose {
  """
  `SECURITY` features provide metadata necessary to securely resolve fields.
  """
  SECURITY

  """
  `EXECUTION` features provide metadata necessary for operation execution.
  """
  EXECUTION
}

type Mutation
  @join__type(graph: ORDERS)
  @join__type(graph: PATIENTS)
{
  createOrder(patientId: Int!, prescriptionId: Int!): Order! @join__field(graph: ORDERS)
  addPatient(name: String!, gender: String!): Patient! @join__field(graph: PATIENTS)
  addPrescription(patientId: String!, name: String!, medId: String!): Prescription! @join__field(graph: PATIENTS)
}

type Order
  @join__type(graph: ORDERS)
{
  id: Int!
  patientId: Int!
  prescriptionId: Int!
  status: String!
}

type Patient
  @join__type(graph: ORDERS, key: "id")
  @join__type(graph: PATIENTS, key: "id")
{
  id: ID!
  ordersCount: Int! @join__field(graph: ORDERS)
  orders: [Order!]! @join__field(graph: ORDERS)
  name: String! @join__field(graph: PATIENTS)
  gender: String! @join__field(graph: PATIENTS)
  prescriptions: [Prescription!]! @join__field(graph: PATIENTS)
}

type Prescription
  @join__type(graph: PATIENTS)
{
  id: Int!
  name: String!
  medId: String!
}

type Query
  @join__type(graph: ORDERS)
  @join__type(graph: PATIENTS)
{
  orders: [Order!]! @join__field(graph: ORDERS)
  getOrdersByPatientId(patientId: Int!): [Order!]! @join__field(graph: ORDERS)
  patients: [Patient!]! @join__field(graph: PATIENTS)
  getPatientById(patientId: String!): Patient! @join__field(graph: PATIENTS)
  prescriptions: [Prescription!]! @join__field(graph: PATIENTS)
}
